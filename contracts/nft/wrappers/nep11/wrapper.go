// Code generated by neo-go contract generate-wrapper --manifest <file.json> --out <file.go> [--hash <hash>] [--config <config>]; DO NOT EDIT.

// Package nicenamesnft contains wrappers for NICENAMES NFT contract.
package nicenamesnft

import (
	"github.com/nspcc-dev/neo-go/pkg/interop"
	"github.com/nspcc-dev/neo-go/pkg/interop/contract"
	"github.com/nspcc-dev/neo-go/pkg/interop/neogointernal"
)

// Hash contains contract hash in big-endian form.
const Hash = "\x45\x42\xda\x87\xf6\xdd\xfd\x55\xbf\xcc\x3a\xfb\x13\xa8\x7b\xef\x56\x4d\x3e\x84"

// BalanceOf invokes `balanceOf` method of contract.
func BalanceOf(holder interop.Hash160) int {
	return neogointernal.CallWithToken(Hash, "balanceOf", int(contract.ReadOnly), holder).(int)
}

// Decimals invokes `decimals` method of contract.
func Decimals() int {
	return neogointernal.CallWithToken(Hash, "decimals", int(contract.ReadOnly)).(int)
}

// OnNEP17Payment invokes `onNEP17Payment` method of contract.
func OnNEP17Payment(from interop.Hash160, amount int, data any) {
	neogointernal.CallWithTokenNoRet(Hash, "onNEP17Payment", int(contract.All), from, amount, data)
}

// OwnerOf invokes `ownerOf` method of contract.
func OwnerOf(token []byte) interop.Hash160 {
	return neogointernal.CallWithToken(Hash, "ownerOf", int(contract.ReadOnly), token).(interop.Hash160)
}

// Properties invokes `properties` method of contract.
func Properties(token []byte) map[string]any {
	return neogointernal.CallWithToken(Hash, "properties", int(contract.ReadOnly), token).(map[string]any)
}

// Symbol invokes `symbol` method of contract.
func Symbol() string {
	return neogointernal.CallWithToken(Hash, "symbol", int(contract.ReadOnly)).(string)
}

// Tokens invokes `tokens` method of contract.
func Tokens() any {
	return neogointernal.CallWithToken(Hash, "tokens", int(contract.ReadOnly)).(any)
}

// TokensList invokes `tokensList` method of contract.
func TokensList() []any {
	return neogointernal.CallWithToken(Hash, "tokensList", int(contract.All)).([]any)
}

// TokensOf invokes `tokensOf` method of contract.
func TokensOf(holder interop.Hash160) any {
	return neogointernal.CallWithToken(Hash, "tokensOf", int(contract.ReadOnly), holder).(any)
}

// TokensOfList invokes `tokensOfList` method of contract.
func TokensOfList(holder interop.Hash160) []any {
	return neogointernal.CallWithToken(Hash, "tokensOfList", int(contract.All), holder).([]any)
}

// TotalSupply invokes `totalSupply` method of contract.
func TotalSupply() int {
	return neogointernal.CallWithToken(Hash, "totalSupply", int(contract.ReadOnly)).(int)
}

// Transfer invokes `transfer` method of contract.
func Transfer(to interop.Hash160, token []byte, data any) bool {
	return neogointernal.CallWithToken(Hash, "transfer", int(contract.All), to, token, data).(bool)
}
